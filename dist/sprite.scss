/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$close-name: 'close';
$close-x: 132px;
$close-y: 0px;
$close-offset-x: -132px;
$close-offset-y: 0px;
$close-width: 64px;
$close-height: 64px;
$close-total-width: 196px;
$close-total-height: 128px;
$close-image: 'sprite.png';
$close: (132px, 0px, -132px, 0px, 64px, 64px, 196px, 128px, 'sprite.png', 'close', );
$expand-name: 'expand';
$expand-x: 0px;
$expand-y: 0px;
$expand-offset-x: 0px;
$expand-offset-y: 0px;
$expand-width: 128px;
$expand-height: 128px;
$expand-total-width: 196px;
$expand-total-height: 128px;
$expand-image: 'sprite.png';
$expand: (0px, 0px, 0px, 0px, 128px, 128px, 196px, 128px, 'sprite.png', 'expand', );
$grid-name: 'grid';
$grid-x: 168px;
$grid-y: 68px;
$grid-offset-x: -168px;
$grid-offset-y: -68px;
$grid-width: 12px;
$grid-height: 12px;
$grid-total-width: 196px;
$grid-total-height: 128px;
$grid-image: 'sprite.png';
$grid: (168px, 68px, -168px, -68px, 12px, 12px, 196px, 128px, 'sprite.png', 'grid', );
$wifi-name: 'wifi';
$wifi-x: 132px;
$wifi-y: 68px;
$wifi-offset-x: -132px;
$wifi-offset-y: -68px;
$wifi-width: 32px;
$wifi-height: 32px;
$wifi-total-width: 196px;
$wifi-total-height: 128px;
$wifi-image: 'sprite.png';
$wifi: (132px, 68px, -132px, -68px, 32px, 32px, 196px, 128px, 'sprite.png', 'wifi', );
$close-2x-name: 'close@2x';
$close-2x-x: 264px;
$close-2x-y: 0px;
$close-2x-offset-x: -264px;
$close-2x-offset-y: 0px;
$close-2x-width: 128px;
$close-2x-height: 128px;
$close-2x-total-width: 392px;
$close-2x-total-height: 256px;
$close-2x-image: 'sprite@2x.png';
$close-2x: (264px, 0px, -264px, 0px, 128px, 128px, 392px, 256px, 'sprite@2x.png', 'close@2x', );
$expand-2x-name: 'expand@2x';
$expand-2x-x: 0px;
$expand-2x-y: 0px;
$expand-2x-offset-x: 0px;
$expand-2x-offset-y: 0px;
$expand-2x-width: 256px;
$expand-2x-height: 256px;
$expand-2x-total-width: 392px;
$expand-2x-total-height: 256px;
$expand-2x-image: 'sprite@2x.png';
$expand-2x: (0px, 0px, 0px, 0px, 256px, 256px, 392px, 256px, 'sprite@2x.png', 'expand@2x', );
$grid-2x-name: 'grid@2x';
$grid-2x-x: 336px;
$grid-2x-y: 136px;
$grid-2x-offset-x: -336px;
$grid-2x-offset-y: -136px;
$grid-2x-width: 24px;
$grid-2x-height: 24px;
$grid-2x-total-width: 392px;
$grid-2x-total-height: 256px;
$grid-2x-image: 'sprite@2x.png';
$grid-2x: (336px, 136px, -336px, -136px, 24px, 24px, 392px, 256px, 'sprite@2x.png', 'grid@2x', );
$wifi-2x-name: 'wifi@2x';
$wifi-2x-x: 264px;
$wifi-2x-y: 136px;
$wifi-2x-offset-x: -264px;
$wifi-2x-offset-y: -136px;
$wifi-2x-width: 64px;
$wifi-2x-height: 64px;
$wifi-2x-total-width: 392px;
$wifi-2x-total-height: 256px;
$wifi-2x-image: 'sprite@2x.png';
$wifi-2x: (264px, 136px, -264px, -136px, 64px, 64px, 392px, 256px, 'sprite@2x.png', 'wifi@2x', );
$spritesheet-width: 196px;
$spritesheet-height: 128px;
$spritesheet-image: 'sprite.png';
$spritesheet-sprites: ($close, $expand, $grid, $wifi, );
$spritesheet: (196px, 128px, 'sprite.png', $spritesheet-sprites, );
$retina-spritesheet-width: 392px;
$retina-spritesheet-height: 256px;
$retina-spritesheet-image: 'sprite@2x.png';
$retina-spritesheet-sprites: ($close-2x, $expand-2x, $grid-2x, $wifi-2x, );
$retina-spritesheet: (392px, 256px, 'sprite@2x.png', $retina-spritesheet-sprites, );

/*
These "retina group" variables are mappings for the naming and pairing of normal and retina sprites.

The list formatted variables are intended for mixins like `retina-sprite` and `retina-sprites`.
*/
$close-group-name: 'close';
$close-group: ('close', $close, $close-2x, );
$expand-group-name: 'expand';
$expand-group: ('expand', $expand, $expand-2x, );
$grid-group-name: 'grid';
$grid-group: ('grid', $grid, $grid-2x, );
$wifi-group-name: 'wifi';
$wifi-group: ('wifi', $wifi, $wifi-2x, );
$retina-groups: ($close-group, $expand-group, $grid-group, $wifi-group, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `retina-sprite` mixin sets up rules and a media query for a sprite/retina sprite.
  It should be used with a "retina group" variable.

The media query is from CSS Tricks: https://css-tricks.com/snippets/css/retina-display-media-query/

$icon-home-group: ('icon-home', $icon-home, $icon-home-2x, );

.icon-home {
  @include retina-sprite($icon-home-group);
}
*/
@mixin sprite-background-size($sprite) {
  $sprite-total-width: nth($sprite, 7);
  $sprite-total-height: nth($sprite, 8);
  background-size: $sprite-total-width $sprite-total-height;
}

@mixin retina-sprite($retina-group) {
  $normal-sprite: nth($retina-group, 2);
  $retina-sprite: nth($retina-group, 3);
  @include sprite($normal-sprite);

  @media (-webkit-min-device-pixel-ratio: 2),
         (min-resolution: 192dpi) {
    @include sprite-image($retina-sprite);
    @include sprite-background-size($normal-sprite);
  }
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}

/*
The `retina-sprites` mixin generates a CSS rule and media query for retina groups
  This yields the same output as CSS retina template but can be overridden in SCSS

@include retina-sprites($retina-groups);
*/
@mixin retina-sprites($retina-groups) {
  @each $retina-group in $retina-groups {
    $sprite-name: nth($retina-group, 1);
    .#{$sprite-name} {
      @include retina-sprite($retina-group);
    }
  }
}
